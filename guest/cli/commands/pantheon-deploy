#!/usr/bin/env bash
#
# Usage
#
#       $1 String ID for host to deploy to as defined in /vagrant/wplib.box.json.
#       $2 Optional String Commit message for Pantheon.  Defaults to "Merging in changes for deployment"
#
#

verify_user_config || error=1

deploy_host="$1"

commit_message=$(default "$2" "Merging in changes for deployment");

project_name=$(read_config "project.name" "require")
if [ "" == "${project_name}" ]; then
    echo -e "\tERROR: The config file wplib.box.json does not have a .project.name or is not a valid JSON file."
    echo -e "\t"
    return 2
fi

if [ "" == "${deploy_host}" ]; then
    echo -e "\tERROR: You must specify a target host to deploy TO:"
    echo -e "\t"
    echo -e "\t\tbox deploy {host}"
    echo -e "\t"
    echo -e "\tWhere {host} is one of:"
    echo -e "\t"
    index=0
    while :; do
        host=$(read_config "hosts | keys[$index]" )
        if [ "" == "${host}" ]; then
            break
        fi
        echo -e "\t\t- ${host}"
        index=$(( $index+1 ))
    done
    echo -e "\t"
    return 3
fi

target_domain=$(read_config "project.target_domain" "require")
if [ "" == "${target_domain}" ]; then
    return 4
fi

git_url=$(read_config "deployment.git_url" "require")
if [ "" == "${git_url}" ]; then
    return 5
fi

echo_if_not_quiet "$*" "=Beginning deploy to '${deploy_host}' server for ${target_domain} at Pantheon..."

#
# Create temporary directories to work in
# See Method # 2 Use of $$ variable:
#  - http://www.cyberciti.biz/tips/shell-scripting-bash-how-to-create-temporary-random-file-name.html
#
clone_dir="${HOME}/.wplib.box.cache/${target_domain}/pantheon-clone"
upstream_dir="${HOME}/.wplib.box.cache/pantheon-upstream"
build_dir="/tmp/deploy-build.$$.dir"

#
# Clone the site from our repo on Pantheon
#
echo_if_not_quiet "$*" "=Cloning/revising clone of ${target_domain}'s Git repo at Pantheon..."
ensure_git_clone "${git_url}" "${clone_dir}" --quiet || return $?

#
# Clone the pristine Pantheon Upstream
#
echo_if_not_quiet "$*" "=Cloning/revising clone of Pantheon's WordPress upstream Git repo..."
ensure_git_clone https://github.com/pantheon-systems/WordPress "${upstream_dir}" --quiet || return $?

#
# Copy the upstream to the build directory
#
echo_if_not_quiet "$*" "=Copying Pantheon's WordPress upstream to build directory..."
cp -RP "${upstream_dir}" "${build_dir}" || return ?*

echo_if_not_quiet "$*" "=Removing '.git' and 'wp-content' sub-directories from build directory..."
#
# Erase the .git that points to Pantheon's pristine Upstream repo
# AND Rip out it's content directory
#
rm -rf "${build_dir}/.git" || return ?*
rm -rf "${build_dir}/wp-content" || return ?*

echo_if_not_quiet "$*" "=Copying content directories from /var/www to build directory..."
#
# Replace with our content directory
#
cp -RP "${WPLIB_BOX_CONTENT_DIR}/" "${build_dir}/wp-content" || return ?*

#
# If there is a /vendor directory, don't forget it
#
if [[ -d "${WPLIB_BOX_VENDOR_DIR}" ]]; then
    echo_if_not_quiet "$*" "=Copying vendor directories from /var/www to build directory..."
    cp -RP "${WPLIB_BOX_VENDOR_DIR}/" "${build_dir}/vendor" || return ?*
fi

#
# If there is a /pantheon.yaml, don't forget it
#
if [ -f "${WPLIB_BOX_DIR}/pantheon.yaml" ]; then
    echo_if_not_quiet "$*" "=Copying pantheon.yaml from /vagrant..."
    cp "${WPLIB_BOX_DIR}/pantheon.yaml" "${build_dir}/pantheon.yaml"
fi

#
# Strip .git "submodules"
#
echo_if_not_quiet "$*" "=Stripping Git submodule references in build directory..."
find "${build_dir}" -name .git | xargs rm -fr || return ?*
find "${build_dir}" -name .gitignore | xargs rm -fr || return ?*
find "${build_dir}" -name .gitattributes | xargs rm -fr || return ?*

#
# Remove these. We do not need these on a hosted site.
#
echo_if_not_quiet "$*" "=Removing items to exclude from build..."
delete_exclude_items "${build_dir}" || return ?*

#
# Remove anything that is in the "require-dev" category
#
echo_if_not_quiet "$*" "=Removing 'require-dev' items from build..."
$WPLIB_BOX_PHPCLI "${WPLIB_BOX_INCLUDES_DIR}/run-command.php" --args remove-composer-require-dev "${build_dir}" || return ?*

#
# Now get the Pantheon repo's .git dir and make it our own
#
echo_if_not_quiet "$*" "=Copying over .git directory from /vagrant..."
cp -R "${clone_dir}/.git" "${build_dir}" || return ?*

cd "${build_dir}" || return ?*

#
# Delete directories that Pantheon Reserves
#
echo_if_not_quiet "$*" "=Deleting all Pantheon-reserved sub-directories from build directory..."
rm -rf "${build_dir}/sites/default/files" || return ?*
rm -rf "${build_dir}/wp-content/uploads" || return ?*
rm -rf "${build_dir}/web/sites/default/files" || return ?*
rm -rf "${build_dir}/web/wp-content/uploads" || return ?*

#
# Add any changes to staging
#
echo_if_not_quiet "$*" "=Staging all files in build directory for commit..."
quiet_git add --all . || return ?*


#
# Commit all changes
#
echo_if_not_quiet "$*" "=Committing all updates in build directory to prepare for deployment..."
quiet_git commit -m "${commit_message}" || return ?*

#
# Now do a pull, just in case.
# It should be up to date though.
#
#echo_if_not_quiet "$*" "=Pulling ..."
#quiet_git pull --commit --no-edit --no-ff --verbose || return ?*

#
# Push our changes back to Panethon
#
echo_if_not_quiet "$*" "=Pushing commit for ${project_name} to '${deploy_host}' at Pantheon..."
#
# Ensure this is already set
#
quiet_git config --global push.default simple || return ?*
quiet_git push || return ?*

echo_if_not_quiet "$*" "=Removing build directory..."
#
# Clean up
#
rm -rf "${build_dir}" || return ?*

echo_if_not_quiet "$*" "=Deployment for ${project_name} to '${deploy_host}' at Pantheon is now complete."
