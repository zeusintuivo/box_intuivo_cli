#!/usr/bin/env bash
#
# Usage
#
#       $1 String ID for host to promote TO, as definded in /vagrant/wplib.box.json.
#       $2 String A message for the tag
#

verify_user_config || error=1

target_domain=$(read_config "project.target_domain" "require")
if [ "" == "${target_domain}" ]; then
    return 2
fi

promote_host="$1"
if [ "" == "${promote_host}" ]; then
    echo -e "\t"
    echo -e "\tERROR: You must specify a target host to deploy TO:"
    echo -e "\t"
    echo -e "\t\tbox promote_host {host}"
    echo -e "\t"
    echo -e "\tWhere {host} is one of:"
    echo -e "\t"
    index=0
    while :; do
        host=$(read_config "hosts | keys[$index]" )
        if [ "" == "${host}" ]; then
            break
        fi
        echo -e "\t\t- ${host}"
        index=$(( $index+1 ))
    done
    echo -e "\t"
    return 2
fi

project_name=$(read_config "project.name" "require")
if [ "" == "${project_name}" ]; then
    echo -e "\tERROR: The config file wplib.box.json does not have a .project.name or is not a valid JSON file."
    echo -e "\t"
    return 1
fi

echo_if_not_quiet "$*" "^Promoting ${promote_host} for ${project_name} at Pantheon..."

git_url=$(read_config "deployment.git_url" "require")
if [ "" == "${git_url}" ]; then
    echo -e "\t"
    echo -e "\tERROR: The host '${promote_host}' has not .git_url in /vagrant/wplib.box.json."
    return 3
fi

site_url=$(read_config "hosts.${promote_host}.site_url" "require")
if [ "" == "${site_url}" ]; then
    echo -e "\t"
    echo -e "\tERROR: The host '${promote_host}' has not .site_url in /vagrant/wplib.box.json."
    return 4
fi

pantheon_site=$(echo "${site_url}" | sed -r 's#.+://(dev|test|live)-.+#\1#')
if [ "${site_url}" == "${pantheon_site}" ]; then
    echo -e "\t"
    echo -e "\tERROR: The .site_url for '${promote_host}' must be in the form http(s)://xxx-*/ where 'xxx' is one of 'dev', 'test', or 'live'."
    return 5
fi

promote_message=$(default "$2" "Promoting to ${pantheon_site}")

clone_dir="${HOME}/build/${target_domain}/pantheon-clone"
ensure_git_clone "${git_url}" "${clone_dir}" || return $?

cd  "${clone_dir}"

#
# Query the Pantheon Git server and extract all the tag numbers for this $pantheon_site.
#
tag_nums=$(git ls-remote --tags | grep -v "{}" | grep "/pantheon_" | grep "_${pantheon_site}_" | sed -r "s#^.+/pantheon_${pantheon_site}_(.+)\$#\1#")

#
# Calculate the next tag to apply in the form: "pantheon_{site}_{num} where:
#
#       {site} is one of 'test', 'stage' or 'live', stored in ${pantheon_site}
#       {num}  is the next unused number
#
max_num=$(max "${tag_nums}")
next_num=$(( $max_num+1 ))
new_tag="pantheon_${pantheon_site}_${next_num}"

#
# Apply the new tag and push it.  This causes Pantheon to deploy to ${pantheon_site}.
#
git tag -a -m "${promote_message}" "${new_tag}" || return $?
git push --tags || return $?

echo_if_not_quiet "$*" "^Done."
