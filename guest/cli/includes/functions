#!/usr/bin/env bash

#
# Checks to see if there is a new commit available for this Box Script repo.
#
function check_updates_available() {

    if [[ "$1" != *"--ignore-update"* ]];then

        local save_dir=$(pwd)
        cd "${WPLIB_BOX_SCRIPTS_DIR}"
        local latest_local=$(git log -1 | grep commit | cut -d" " -f2)
        local remote_url=$(git remote -v show | grep "(fetch)" | cut -f 2 | cut -d" " -f1)
        local latest_remote=$(git ls-remote --heads "${remote_url}" | grep "refs/heads/master" | cut --fields 1)
        if [[ "${latest_local}" != "${latest_remote}" ]]; then
            echo
            echo -e "\tNOTICE: Your box scripts directory needs updating."
            echo -e "\tTo update simply run git pull in ${WPLIB_BOX_SCRIPTS_DIR}."
        fi
        cd "${save_dir}"

    fi

}

#
# Usage
#   $1 String Space separated list of numbers
#
# Echos
#   Maximum number
#
# See:
#   http://stackoverflow.com/a/16854326/102699
#
function max() {
    local max=0
    local num
    while read num; do
        ((num > max)) && max=$num
    done <<< "$(echo -e "$1")"
    echo $max
}

#
# First clone the site from our repo on Pantheon
#
# Usage:
#
#       $1 - String Git URL to clone
#       $1 - String Directory to clone into
#
#
function ensure_git_clone() {
    local git_url="$1"
    local clone_dir="$2"

    if [ "" == "$1" ]; then
        echo
        echo -e "\tERROR: You must specify a Git URL to clone as 1st parameter of ensure_git_clone()."
        echo
        return 1
    fi

    if [ "" == "$2" ]; then
        echo
        echo -e "\tERROR: You must specify a directory to clone into as 2nd parameter of ensure_git_clone()."
        echo
        return 2
    fi

    if [[ -d "$2" && ! -d "$2/.git" ]]; then
        echo
        echo -e "\tERROR: $2"
        echo -e "\t       exists but does not contain a Git repo. Cannot continue."
        echo
        return 3
    fi

    echo_if_not_quiet "$*" "=Cloning "${git_url}" to ${clone_dir}..."

    if [ ! -d "${clone_dir}" ]; then

        quiet_git clone "${git_url}" "${clone_dir}" || return $?

    else

        cd "${clone_dir}"

        # Set repo to match remote origin/master
        quiet_git fetch origin || return $?
        quiet_git reset --hard origin/master > /dev/null || return $?

    fi
}

#
# Verify that a User Config exists.  If not, output how-to-fix message and return 1
#
function verify_user_config() {

    if [[ ! -f "${WPLIB_BOX_USER_CONFIG}" ]]; then
        echo "{}" > $WPLIB_BOX_USER_CONFIG
    fi
    if [[ "" == $(cat "${WPLIB_BOX_USER_CONFIG}") ]]; then
        echo "{}" > $WPLIB_BOX_USER_CONFIG
    fi
    if [[ "" == $(read_user_config "name") ]]; then
        local missing="name"
        local what="property"
        local action="command"
        local commands="\tbox set-user-name  'Your Full Name'"
    fi
    if [[ "" == $(read_user_config "email") ]]; then
        if [ "" == "${missing}" ];then
            local missing="email"
        else
            local missing="${missing}\n\temail"
       fi
        local what="properties"
        local action="commands"
        local commands="${commands}\n\tbox set-user-email 'Your Email Address'"
    fi
    if [ "" != "${missing}" ]; then
        echo
        echo "Your WPLib Box user config file is missing the ${what}:"
        echo
        echo -e "\t${missing}"
        echo
        echo "You must run the following two ${action} first:"
        echo
        echo -e "${commands}"
        return 1
    fi
    return 0
}

#
# Usage:
#
#       $1 - Argument passing in that might be empty, e.g. "$1", "$3", etc.
#       $1 - Default value to echo if $1 is empty
#
# Example
#
#       username=$(default "$1", "Luke Skywalker")
#
function default() {

    if [ "" == "$2" ]; then
        echo
        echo "You must specify a default value as the 2nd paramater to default."
        echo
        return 1
    fi
    if [ "" == "$1" ]; then
       echo "$2"
    else
       echo "$1"
    fi
}

#
# Example
#
#       box show-user-var "email"
#
function show_user_var() {

    if [ "" == "$1" ]; then
        echo
        echo "You must specify a property for the box's user when calling show_user_var."
        echo
        return 1
    fi

    local var="$1"
    local value=$(read_user_config "${var}") || return $?
    if [ "" == "${value}" ]; then
        echo "The user.$1 is EMPTY."
    else
        echo "The user.$1 is: ${value}."
    fi
}

#
# Usage:
#
#       $1 - What to set e.g. user, email, etc.
#       $1 - Email of box user
#
# Example
#
#       box set-box-var ".email" "luke@theforce.org"
#
function set_user_var() {

    if [ "" == "$1" ]; then
        echo
        echo "You must specify a property for the box's user when calling set_user_var."
        echo
        return 1
    fi

    if [ "" == "$2" ]; then
        echo
        echo "You must specify a box user's $1 when calling set-box-user-$1."
        echo
        return 2
    fi
    echo_if_not_quiet "$*" "=Setting user.$2 = '$2'..."

    set_json_file_var "${WPLIB_BOX_USER_CONFIG}" ".$1" "$2" --quiet || return $?
}

#
# Reads the config file /vagrant/.wplib.box.json and returns a value
#
# $1 - String The json file to update
# $2 - String The JQ selector
# $3 - String The value to assign the JQ selector
#
# Usage: set_json_file_var /home/vagrant/wplib.box.json ".user" "Luke Skywalker"
#
#   Result: /home/vagrant/wplib.box.json ==> "{ "user" : "Luke Skywalker" }
#
#
function set_json_file_var() {

    echo_if_not_quiet "$*" "=Setting $1 = '$2' in $3..."

    if [ "" == "$1" ]; then
        echo
        echo "You must specify a JSON file name as the 3rd argument when calling set_json_file_var()."
        echo
        return 1
    fi

    if [ "" == "$1" ]; then
        echo
        echo "You must specify a JQ selector as the 1st argument when calling set_json_file_var()."
        echo
        return 2
    fi

    if [ "" == "$2" ]; then
        echo
        echo "You must specify a value to assign the JQ selector as the 2nd argument when calling set_json_file_var()."
        echo
        return 3
    fi

    if [ ! -f "$1" ]; then
        echo_if_not_quiet "$*" "=Creating new $1..."
        echo "{}" > "$1" || return $?
    fi

    local tmpfile=$(mktemp /tmp/new-json-file.XXXXXX)

    local filter="$2 = \"$3\""
    jq "${filter}" "$1" >$tmpfile || return $?
    mv "${tmpfile}" "$1"  || return $?

}


#
# Reads the user config file /home/vagrant/.wplib.box.json and echos a value
#
# $1 - String
# $2 - String Optional if "require" then error if not there.
#
# Usage: username=$(read_config "name")
#   Result: $username ==> "Luke Skywalker"
#
function read_user_config() {
    read_config "$1" "$2" "${WPLIB_BOX_USER_CONFIG}"
}

#
# Reads the config file /vagrant/.wplib.box.json and returns a value
#
# $1 - String
# $2 - String Optional if "require" then error if not there.
#
# Usage: git_url=$(read_config "path.test.git_url")
#   Result: $git_url ==> "ssh://..."
#
#
function read_config() {
    require="$2"
    local config_file=$(default "$3" "${WPLIB_BOX_CONFIG}")

    local property=$(cat "${config_file}" | jq --raw-output ".$1"  2>/dev/null)
    if [[ "null" == "${property}" || "" == "${property}" ]]; then
        if [ "require" == "${require}" ]; then
            printf "\tERROR:\n"
            echo -e "\tThe config file ${config_file}\n"
            echo -e "\tdoes not have a value for $1.\n"
            return 1
        fi
    else
        echo "${property}";
    fi
}

#
# Outputs the file extension given a file name
#
# $1 - String
#
# Usage: string=$(to_lowercase "FOO.BAR")
#   Result: $string ==> "foo.bar"
#
#
function to_lowercase() {
    echo "${1,,}"
}

#
# Outputs the file extension given a file name
#
# $1 - Filename
#
# Usage: extension=$(file_extension "foo/bar.baz")
#   Result: $extension ==> "baz"
#
#
function file_extension() {
    echo "${1##*.}"
}

#
# Outputs the base filename given a full filename
# Base filename means no path and no extension
#
# $1 - Filename
#
# Usage: basename=$(file_basename "foo/bar.baz")
#   Result: $basename ==> "bar"
#
function file_basename() {
    local filename=$(basename "$1")
    echo "${filename%.*}"
}

#
# Returns a filename that does not exist given an existing filename.
#
# $1 - The backup file, e.g.  /vagrant/sql/backup.sql
#
# Outputs: The new file name in the form of {previous}{n}.{ext} where:
#
#       {previous} - Root filename for backup, e.g. /vagrant/sql/backup
#       {n}        - Ordinal position for prior backups, e.g. 1, 2, 3, etc
#       {ext}      - The file extension, e.g. sql
#
# Usage:  newbakfile=$(next_backup_file "${file_to_backup}")
#
function next_backup_file() {
    local bakfile="$1"

    #
    # Get the file extension if there is one
    # See: http://stackoverflow.com/a/965072/102699
    #
    local ext=$(file_extension "${bakfile}")
    if [[ "" == "${ext}" || "${ext}" == "${bakfile}" ]]; then
        ext=""
    fi


    #
    # Get the filepath sans extension
    # See: http://stackoverflow.com/a/965072/102699
    #
    bakfile="${bakfile%.*}"

    #
    # Now check to see if the default prior backup exists
    # Continue checking until we find a workable filename
    #
    local test="${bakfile}.${ext}"
    local counter
    until [ ! -e "${test}" ]; do
        counter=$((counter))
        let counter++
        test="${bakfile}${counter}.${ext}"
    done
    echo "${test}"
}

function is_dry_run() {
    if [[ "$1" == *"--dry-run"* ]]; then
        echo "true"
        return
    fi
    echo "false"
}

function is_quiet() {
    if [[ "$1" == *"--quiet"* ]]; then
        echo "true"
        return
    fi
    echo "false"
}

function is_wp_installed() {
    if [ "" == "${WPLIB_BOX_CONTENT_DIR}" ]; then
        echo "true"
        return
    fi
    echo "false"
}

#
# Generate output if -q|--quiet not in a string passed as $1.
#
# $1 - Always "$*", e.g. string containing parameters passed to the calling script
# $2 - String to echo if not quiet. Prefix string w/"=", "^", "&" or "=" to effect before and after echos.
#
function echo_if_not_quiet() {
    if [ "true" != $(is_quiet "$1") ]; then
        local regex="s/\\\n/\n/g"
        local control=${2:0:1}
        local message=${2:1}
        case "${control}" in
            "^")
                echo -e "${message}" | sed "${regex}"
                echo
                ;;
            "*")
                echo
                echo -e "${message}" | sed "${regex}"
                echo
                ;;
            "=")
                echo -e "${message}" | sed "${regex}"
                ;;
            "&")
                echo
                echo -e "${message}" | sed "${regex}"
                ;;
            *)
                echo
                echo "CODING ERROR:"
                echo "Your message for echo_if_not_quiet() does not begin with one of: ^, *, = or &."
                echo
                ;;
        esac
    fi
}

function exit_if_wp_not_installed() {
    if [ "true" == $(is_wp_installed) ]; then
        echo "WordPress in not installed. Cannot $1."
        echo
        how_to_install_wp
        exit
    fi
}

#
# Check the "--force" option. If not set, output error message
#
# $1 - Always "$*", e.g. string containing parameters passed to the calling script
# $2 - Error message or optionally output
#

function exit_if_no_force_option() {
    if [[ "$1" != *"--force"* ]]; then
        echo "ERROR: $2. Cannot continue."
        echo
        echo -e "\tUse --force to force continue."
        echo
        exit
    fi
}

function find_composer_vendor_dir() {
    if [ -d "${WPLIB_BOX_WEB_ROOT_DIR}/vendor" ]; then
        echo "${WPLIB_BOX_WEB_ROOT_DIR}/vendor"
        return
    fi

    if [ -d "${WPLIB_BOX_DIR}/vendor" ]; then
        echo "${WPLIB_BOX_DIR}/vendor"
        return
    fi
}

function find_wp_content_dir() {
    if [ -d "${WPLIB_BOX_WEB_ROOT_DIR}/content" ]; then
        echo "${WPLIB_BOX_WEB_ROOT_DIR}/content"
        return
    fi

    if [ -d "${WPLIB_BOX_WEB_ROOT_DIR}/wp-content" ]; then
        echo "${WPLIB_BOX_WEB_ROOT_DIR}/wp-content"
        return
    fi
}

function find_wp_plugins_dir() {
    local content_dir=$(find_wp_content_dir)
    echo "${content_dir}/plugins"
}

function find_wp_mu_plugins_dir() {
    local content_dir=$(find_wp_content_dir)
    echo "${content_dir}/mu-plugins"
}

function how_to_install_wp() {
    echo "Download and install WordPress from the web,"
    echo
    echo -e "\tOR"
    echo
    echo "To install from a newly cloned WPLib Box repo use Composer FROM your HOST computer:"
    echo
    echo -e "\tcomposer install"
    echo
    echo If you are unfamiliar with Composer you can find installations instructions at one of:
    echo
    echo -e "\thttps://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx"
    echo
    echo -e "\thttps://getcomposer.org/doc/00-intro.md#installation-windows"
    echo
    echo On Mac or Linux be sure to remember to move composer.phar to /usr/local/bin:
    echo
    echo -e "\tmv composer.phar /usr/local/bin/composer"
    echo
}

function delete_exclude_items() {
    local root_dir="$1"
	local index=0
	local basename
	local item_to_exclude
	while :; do
	    item_to_exclude=$(read_config "deployment.exclude[${index}]")
	    if [ "" == "${item_to_exclude}" ]; then
	        break
        fi
	    item_to_exclude="${root_dir}/${item_to_exclude}"
	    if [[ ! -f "${item_to_exclude}" &&  ! -d "${item_to_exclude}" ]];then
	        echo -e "\tNOTICE: ${item_to_exclude} is in exclude list in ${WPLIB_BOX_CONFIG} but does not exist on disk."
	    else
	        basename=$(basename "${item_to_exclude}")
	        echo_if_not_quiet "$*", "=\tDeleting ${basename} from build directory..."
	        rm -rf "${item_to_exclude}" || return ?*
	    fi
	    index=$(( $index+1 ))
	done

}

#
# Echos the substring after a character
#
# $1 - String
# $2 - Character
#
# Usage: vendor_dir=$(substring_after "www/vendor" "/")
#   Result: $vendor_dir ==> "vendor"
#
#
function substring_after() {
    local string="$1"
    local character="$2"
    echo "${string#*${character}}"
}

#
# Runs Git commands, quietly, unless they fail
#
# See http://stackoverflow.com/a/8944284/102699
#
function quiet_git() {
    local stdout=$(tempfile)
    local stderr=$(tempfile)

    if ! git "$@" </dev/null >$stdout 2>$stderr; then
        # Capture the error
        error=$?
        # Output the error messages to stderr
        cat $stderr >&2
        rm -f $stdout $stderr
        return $error
    fi

    rm -f $stdout $stderr
}

